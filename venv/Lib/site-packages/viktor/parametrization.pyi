import abc
import datetime
from .api_v1 import API as API, Entity as Entity, FileResource as FileResource
from .core import Color as Color, ISCLOSE_ATOL as ISCLOSE_ATOL, _OrderedClass
from .errors import UserError as UserError
from .geometry import GeoPoint as GeoPoint, GeoPolygon as GeoPolygon, GeoPolyline as GeoPolyline
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import Any, Callable, List, Literal, Optional, Sequence, Union

logger: Incomplete
MinMaxType: Incomplete
VisibleType: Incomplete

class _AttrGroup:
    def __init__(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

class Interaction(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, view: str, selection: Sequence[str] = ...): ...

class MapSelectInteraction(Interaction):
    def __init__(self, view: str, *, selection: Sequence[str] = ..., min_select: int = ..., max_select: int = ...) -> None: ...

class _ActionButton(ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, method: str, longpoll: bool, visible: VisibleType, always_available: bool, flex: Optional[int], description: Optional[str], interaction: Interaction = ...) -> None: ...

class DownloadButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = ..., *, visible: VisibleType = ..., always_available: bool = ..., flex: int = ..., description: str = ..., interaction: Interaction = ...) -> None: ...

class ActionButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = ..., *, visible: VisibleType = ..., always_available: bool = ..., flex: int = ..., description: str = ..., interaction: Interaction = ...) -> None: ...
AnalyseButton = ActionButton

class OptimizationButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = ..., *, visible: VisibleType = ..., always_available: bool = ..., flex: int = ..., description: str = ..., interaction: Interaction = ...) -> None: ...
OptimiseButton = OptimizationButton

class SetParamsButton(_ActionButton):
    def __init__(self, ui_name: str, method: str, longpoll: bool = ..., *, visible: VisibleType = ..., always_available: bool = ..., flex: int = ..., description: str = ..., interaction: Interaction = ...) -> None: ...

class Lookup:
    def __init__(self, target: str) -> None: ...

class FunctionLookup:
    def __init__(self, func: Callable, *func_args: Any, **kwargs: Any) -> None: ...

class RowLookup:
    def __init__(self, target: str) -> None: ...

class BoolOperator(ABC, metaclass=abc.ABCMeta): ...

class And(BoolOperator):
    def __init__(self, *operands: Union[Lookup, BoolOperator, bool]) -> None: ...

class Or(BoolOperator):
    def __init__(self, *operands: Union[Lookup, BoolOperator, bool]) -> None: ...

class Not(BoolOperator):
    def __init__(self, operand: Union[Lookup, BoolOperator, bool]) -> None: ...

class IsEqual(BoolOperator):
    def __init__(self, operand1: Union[Lookup, BoolOperator, Any], operand2: Union[Lookup, BoolOperator, Any]) -> None: ...

class IsNotEqual(IsEqual): ...

class IsTrue(IsEqual):
    def __init__(self, operand: Union[Lookup, BoolOperator, Any]) -> None: ...

class IsFalse(IsEqual):
    def __init__(self, operand: Union[Lookup, BoolOperator, Any]) -> None: ...

class IsNotNone(IsNotEqual):
    def __init__(self, operand: Union[Lookup, BoolOperator, Any]) -> None: ...

class DynamicArrayConstraint:
    def __init__(self, dynamic_array_name: str, operand: Union[Lookup, BoolOperator, FunctionLookup]) -> None: ...

class DynamicArray(_AttrGroup):
    def __init__(self, ui_name: str, min: Union[int, Lookup, FunctionLookup, Callable] = ..., max: Union[int, Lookup, FunctionLookup, Callable] = ..., copylast: bool = ..., visible: Union[bool, BoolOperator, Lookup, FunctionLookup, Callable] = ..., default: List[dict] = ..., *, description: str = ..., row_label: str = ...) -> None: ...

class Field(ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, ui_name: str, name: str = ..., prefix: str = ..., suffix: str = ..., default: Any = ..., flex: int = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class ColorField(Field):
    def __init__(self, ui_name: str, name: str = ..., *, default: Color = ..., flex: int = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class DateField(Field):
    def __init__(self, ui_name: str, name: str = ..., *, default: datetime.date = ..., flex: int = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class NumberField(Field):
    def __init__(self, ui_name: str, name: str = ..., prefix: str = ..., *, suffix: str = ..., default: float = ..., step: float = ..., min: MinMaxType = ..., max: MinMaxType = ..., num_decimals: int = ..., visible: VisibleType = ..., flex: int = ..., variant: str = ..., description: str = ...) -> None: ...

class IntegerField(NumberField):
    def __init__(self, ui_name: str, name: str = ..., prefix: str = ..., *, suffix: str = ..., default: int = ..., step: int = ..., min: MinMaxType = ..., max: MinMaxType = ..., visible: VisibleType = ..., flex: int = ..., description: str = ...) -> None: ...

class TextField(Field):
    def __init__(self, ui_name: str, name: str = ..., prefix: str = ..., *, suffix: str = ..., default: str = ..., visible: VisibleType = ..., flex: int = ..., description: str = ...) -> None: ...

class OutputField:
    def __init__(self, ui_name: str, *, value: Union[float, str, BoolOperator, Lookup, FunctionLookup, Callable] = ..., prefix: str = ..., suffix: str = ..., visible: VisibleType = ..., flex: int = ..., description: str = ...) -> None: ...

class LineBreak:
    def __init__(self) -> None: ...

class BooleanField(Field):
    def __init__(self, ui_name: str, name: str = ..., *, default: bool = ..., visible: VisibleType = ..., flex: int = ..., always_available: bool = ..., description: str = ...) -> None: ...
ToggleButton = BooleanField

class _SelectField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, ui_name: str, name: Optional[str], prefix: Optional[str], suffix: Optional[str], options: Union[List[Union[float, str, 'OptionListElement']], Callable], default: Optional[Union[List[Union[float, str]], float, str]], flex: Optional[int], visible: VisibleType, multiple: bool = ..., description: str = ...) -> None: ...

class OptionField(_SelectField):
    def __init__(self, ui_name: str, options: Union[List[Union[float, str, 'OptionListElement']], Callable], name: str = ..., prefix: str = ..., suffix: str = ..., default: Union[float, str] = ..., visible: VisibleType = ..., flex: int = ..., *, description: str = ..., variant: str = ..., autoselect_single_option: bool = ...) -> None: ...

class MultiSelectField(_SelectField):
    def __init__(self, ui_name: str, options: Union[List[Union[float, str, 'OptionListElement']], Callable], name: str = ..., prefix: str = ..., suffix: str = ..., default: List[Union[float, str]] = ..., visible: VisibleType = ..., flex: int = ..., *, description: str = ...) -> None: ...
MultipleSelectField = MultiSelectField

class AutocompleteField(_SelectField):
    def __init__(self, ui_name: str, options: Union[List[Union[float, str, 'OptionListElement']], Callable], name: str = ..., prefix: str = ..., suffix: str = ..., default: Union[float, str] = ..., visible: VisibleType = ..., flex: int = ..., *, description: str = ...) -> None: ...

class _EntityField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, ui_name: str, name: str = ..., visible: VisibleType = ..., flex: int = ..., entity_type_names: List[str] = ..., description: str = ...) -> None: ...

class _EntitySelectField(_EntityField, ABC, metaclass=abc.ABCMeta): ...

class EntityOptionField(_EntitySelectField):
    def __init__(self, ui_name: str, entity_type_names: List[str], *, name: str = ..., visible: VisibleType = ..., flex: int = ..., description: str = ...) -> None: ...

class _EntityOptionField(_EntitySelectField, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, name: str = ..., visible: VisibleType = ..., flex: int = ..., *, entity_type_names: List[str] = ..., description: str = ...) -> None: ...

class ChildEntityOptionField(_EntityOptionField): ...
class SiblingEntityOptionField(_EntityOptionField): ...
class _EntityMultiField(_EntityField, ABC, metaclass=abc.ABCMeta): ...

class _EntityMultiSelectField(_EntityMultiField, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, name: str = ..., visible: VisibleType = ..., flex: int = ..., *, entity_type_names: List[str] = ..., description: str = ...) -> None: ...

class EntityMultiSelectField(_EntityMultiField):
    def __init__(self, ui_name: str, entity_type_names: List[str], *, name: str = ..., visible: VisibleType = ..., flex: int = ..., description: str = ...) -> None: ...

class ChildEntityMultiSelectField(_EntityMultiSelectField): ...

class ChildEntityManager(Field):
    def __init__(self, entity_type_name: str, *, visible: VisibleType = ...) -> None: ...

class SiblingEntityMultiSelectField(_EntityMultiSelectField): ...

class _FileField(Field, ABC, metaclass=abc.ABCMeta):
    def __init__(self, ui_name: str, file_types: Sequence[str] = ..., *, max_size: int = ..., name: str = ..., visible: VisibleType = ..., flex: int = ..., description: str = ...) -> None: ...

class FileField(_FileField): ...
class MultiFileField(_FileField): ...

class Table(Field, _AttrGroup):
    def __init__(self, ui_name: str, name: str = ..., *, default: List[dict] = ..., visible: VisibleType = ..., description: str = ...) -> None: ...
TableInput = Table

class _GeoField(Field, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, ui_name: str, *, name: str = ..., default: Union['GeoPoint', 'GeoPolyline', 'GeoPolygon', List['GeoPoint'], List['GeoPolyline'], List['GeoPolygon']] = ..., visible: VisibleType = ..., description: str = ...): ...

class GeoPointField(_GeoField):
    def __init__(self, ui_name: str, *, name: str = ..., default: GeoPoint = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class GeoPolylineField(_GeoField):
    def __init__(self, ui_name: str, *, name: str = ..., default: GeoPolyline = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class GeoPolygonField(_GeoField):
    def __init__(self, ui_name: str, *, name: str = ..., default: GeoPolygon = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class _GeoMultiField(_GeoField, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, ui_name: str, *, name: str = ..., default: Union[List['GeoPoint'], List['GeoPolyline'], List['GeoPolygon']] = ..., visible: VisibleType = ..., description: str = ...): ...

class _GeoMultiPointField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str = ..., default: List['GeoPoint'] = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class _GeoMultiPolylineField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str = ..., default: List['GeoPolyline'] = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class _GeoMultiPolygonField(_GeoMultiField):
    def __init__(self, ui_name: str, *, name: str = ..., default: List['GeoPolygon'] = ..., visible: VisibleType = ..., description: str = ...) -> None: ...

class TextAreaField(Field):
    def __init__(self, ui_name: str, name: str = ..., default: str = ..., visible: VisibleType = ..., flex: int = ..., *, description: str = ...) -> None: ...
TextAreaInput = TextAreaField

class Text(Field):
    def __init__(self, value: str, *, visible: VisibleType = ..., flex: int = ...) -> None: ...

class Image(Field):
    def __init__(self, path: str, *, align: Literal['left', 'center', 'right'] = ..., caption: str = ..., flex: int = ..., max_width: int = ..., visible: VisibleType = ...) -> None: ...

class HiddenField:
    def __init__(self, ui_name: str, name: str = ...) -> None: ...

class OptionListElement:
    def __init__(self, value: Union[float, str], label: str = ..., visible: Union[bool, 'BoolOperator', 'Lookup', 'FunctionLookup'] = ...) -> None: ...
    @property
    def label(self) -> str: ...
    @property
    def value(self) -> Union[float, str]: ...

class Parametrization(metaclass=_OrderedClass):
    def __init__(self, *, width: int = ...) -> None: ...
ViktorParametrization = Parametrization

class _Group(_AttrGroup, metaclass=abc.ABCMeta):
    def __init__(self, title: str, description: str = ...) -> None: ...

class Page(_Group):
    def __init__(self, title: str, *, views: Union[str, Sequence[str]] = ..., description: str = ...) -> None: ...

class Step(Page):
    def __init__(self, title: str, *, views: Union[str, Sequence[str]] = ..., description: str = ..., previous_label: str = ..., next_label: str = ..., on_next: Callable = ...) -> None: ...

class Tab(_Group):
    def __init__(self, title: str, *, description: str = ...) -> None: ...

class Section(_Group):
    def __init__(self, title: str, *, description: str = ...) -> None: ...
