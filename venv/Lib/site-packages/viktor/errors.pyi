from _typeshed import Incomplete
from typing import Any, Sequence
from viktor.parametrization import Step as Step

class _OldExcelWorkerError(Exception): ...

class _ParamNotFoundError(ValueError):
    def __init__(self, key: str) -> None: ...

class Error(Exception): ...
class EntityError(Error): ...
class EntityCreateError(EntityError): ...
class EntityDeleteError(EntityError): ...
class EntityNotFoundError(EntityError): ...
class EntityReviseError(EntityError): ...
class ExecutionError(Error): ...
class GEFClassificationError(Exception): ...
class GEFParsingError(Exception): ...
class InternalError(Error): ...

class InputViolation:
    message: Incomplete
    fields: Incomplete
    def __init__(self, message: str, fields: Sequence[str]) -> None: ...

class LicenseError(Error): ...
class ModelError(Error): ...
class ParsingError(Error): ...
class SciaParsingError(Exception): ...
class SpreadsheetError(Exception): ...
class SummaryError(Exception): ...

class UserError(Exception):
    input_violations: Incomplete
    def __init__(self, *messages: Any, input_violations: Sequence['InputViolation'] = ...) -> None: ...

class ViewError(Exception): ...
class WordFileError(Exception): ...
