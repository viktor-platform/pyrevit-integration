import datetime
from .core import File as File
from .errors import EntityCreateError as EntityCreateError, EntityDeleteError as EntityDeleteError, EntityNotFoundError as EntityNotFoundError, EntityReviseError as EntityReviseError, InternalError as InternalError
from _typeshed import Incomplete
from munch import Munch as Munch
from typing import Any, Iterator, List, Optional, Tuple, Union

class FileResource:
    def __init__(self, source_id: int, api: _API = ...) -> None: ...
    @property
    def file(self) -> File: ...
    @property
    def filename(self) -> str: ...

class _FileResource:
    source_id: Incomplete
    scope: Incomplete
    entity_id: Incomplete
    filename: Incomplete
    def __init__(self, *, source_id: int, scope: str, entity_id: Optional[int], filename: str) -> None: ...

class User:
    first_name: Incomplete
    last_name: Incomplete
    email: Incomplete
    job_title: Incomplete
    def __init__(self, *, first_name: str, last_name: str, email: str, job_title: str) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def full_name(self) -> str: ...

class EntityType:
    name: Incomplete
    id: Incomplete
    def __init__(self, name: str, id_: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...

class _ResolvedEntity:
    name: Incomplete
    id: Incomplete
    entity_type: Incomplete
    def __init__(self, api: _API, name: str, id_: int, entity_type: EntityType, params: Munch = ..., summary: Munch = ...) -> None: ...
    @classmethod
    def from_json(cls, api: _API, response_json: dict) -> _ResolvedEntity: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...

class EntityRevision:
    params: Incomplete
    created_date: Incomplete
    def __init__(self, params: Munch, created_date: datetime.datetime) -> None: ...

class Entity:
    def __init__(self, api: _API, origin_id: int, operations: List[Tuple[str, bool]], resolved: _ResolvedEntity = ...) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def entity_type(self) -> EntityType: ...
    @property
    def id(self) -> int: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...
    def parent(self, *, privileged: bool = ...) -> Entity: ...
    def children(self, *, include_params: bool = ..., entity_type_names: List[str] = ..., privileged: bool = ...) -> EntityList: ...
    def siblings(self, *, include_params: bool = ..., entity_type_names: List[str] = ..., privileged: bool = ...) -> EntityList: ...
    def get_file(self) -> File: ...
    def create_child(self, entity_type_name: str, name: str, *, params: Union[dict, Munch] = ..., privileged: bool = ..., **kwargs: Any) -> Entity: ...
    def revisions(self) -> EntityRevisionList: ...
    def delete(self, *, privileged: bool = ...) -> None: ...
    def set_params(self, params: Union[dict, Munch], *, privileged: bool = ...) -> Entity: ...
    def rename(self, name: str, *, privileged: bool = ...) -> Entity: ...

class EntityList:
    def __init__(self, api: _API, relation: str, origin: Optional[Entity], entity_type_names: Optional[List[str]], include_params: bool, *, privileged: bool = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Entity: ...
    def __iter__(self) -> Iterator[Entity]: ...

class EntityRevisionList:
    def __init__(self, api: _API, entity: Entity, *, privileged: bool = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> EntityRevision: ...
    def __iter__(self) -> Iterator[EntityRevision]: ...

class _API:
    host: Incomplete
    def __init__(self, token: str, host: str) -> None: ...
    def get_current_user(self) -> User: ...
    def get_entity(self, id_: int, *, privileged: bool = ...) -> Entity: ...
    def get_root_entities(self, *, include_params: bool = ..., entity_type_names: List[str] = ..., privileged: bool = ...) -> EntityList: ...
    def get_entity_parent(self, entity_id: int, *, privileged: bool = ...) -> Entity: ...
    def get_entity_children(self, entity_id: int, *, include_params: bool = ..., entity_type_names: List[str] = ..., privileged: bool = ...) -> EntityList: ...
    def get_entity_siblings(self, entity_id: int, *, include_params: bool = ..., entity_type_names: List[str] = ..., privileged: bool = ...) -> EntityList: ...
    def get_entity_file(self, entity_id: int, *, privileged: bool = ...) -> File: ...
    def create_child_entity(self, parent_entity_id: int, entity_type_name: str, name: str, *, params: Union[dict, Munch] = ..., privileged: bool = ..., **kwargs: Any) -> Entity: ...
    def get_entity_revisions(self, entity_id: int, *, privileged: bool = ...) -> EntityRevisionList: ...
    def delete_entity(self, entity_id: int, *, privileged: bool = ...) -> None: ...
    def set_entity_params(self, entity_id: int, params: Union[dict, Munch], *, privileged: bool = ...) -> Entity: ...
    def rename_entity(self, entity_id: int, name: str, *, privileged: bool = ...) -> Entity: ...
    def get_entities_by_type(self, entity_type_name: str, *, include_params: bool = ..., privileged: bool = ...) -> EntityList: ...
    def generate_upload_url(self, entity_type_name: str, *, privileged: bool = ...) -> dict: ...

class API(_API):
    def __init__(self) -> None: ...
