import abc
import os
from .api_v1 import API as API
from .core import Color as Color, File as File
from .errors import SummaryError as SummaryError, ViewError as ViewError
from .geometry import GeoPoint as GeoPoint, GeoPolygon as GeoPolygon, GeoPolyline as GeoPolyline, Point as Point, TransformableObject as TransformableObject
from _typeshed import Incomplete
from abc import ABC
from collections import OrderedDict
from enum import Enum
from io import BytesIO, StringIO
from typing import Any, Callable, Dict, List, Optional, Sequence, Tuple, Type, Union

class DataStatus(Enum):
    INFO: DataStatus
    SUCCESS: DataStatus
    WARNING: DataStatus
    ERROR: DataStatus

class DataItem:
    def __init__(self, label: str, value: Union[str, float, None], subgroup: DataGroup = ..., *, prefix: str = ..., suffix: str = ..., number_of_decimals: int = ..., status: DataStatus = ..., status_message: str = ..., explanation_label: str = ...) -> None: ...
    @property
    def subgroup(self) -> DataGroup: ...

class DataGroup(OrderedDict):
    def __init__(self, *args: DataItem, **kwargs: DataItem) -> None: ...
    @classmethod
    def from_data_groups(cls, groups: List['DataGroup']) -> DataGroup: ...

class MapEntityLink:
    def __init__(self, label: str, entity_id: int) -> None: ...

class MapFeature(ABC, metaclass=abc.ABCMeta):
    def __init__(self, *, title: str = ..., description: str = ..., color: Color = ..., entity_links: List[MapEntityLink] = ..., identifier: Union[int, str] = ...) -> None: ...

class MapPoint(MapFeature):
    def __init__(self, lat: float, lon: float, alt: float = ..., *, icon: str = ..., **kwargs: Any) -> None: ...
    @classmethod
    def from_geo_point(cls, point: GeoPoint, *, icon: str = ..., **kwargs: Any) -> MapPoint: ...
    @property
    def lat(self) -> float: ...
    @property
    def lon(self) -> float: ...
    @property
    def alt(self) -> float: ...

class MapPolyline(MapFeature):
    def __init__(self, *points: MapPoint, **kwargs: Any) -> None: ...
    @classmethod
    def from_geo_polyline(cls, polyline: GeoPolyline, **kwargs: Any) -> MapPolyline: ...
    @property
    def points(self) -> List[MapPoint]: ...

class MapLine(MapPolyline):
    def __init__(self, start_point: MapPoint, end_point: MapPoint, **kwargs: Any) -> None: ...
    @property
    def start_point(self) -> MapPoint: ...
    @property
    def end_point(self) -> MapPoint: ...

class MapPolygon(MapFeature):
    def __init__(self, points: List[MapPoint], *, holes: List['MapPolygon'] = ..., **kwargs: Any) -> None: ...
    @classmethod
    def from_geo_polygon(cls, polygon: GeoPolygon, **kwargs: Any) -> MapPolygon: ...
    @property
    def points(self) -> List[MapPoint]: ...
    @property
    def holes(self) -> List['MapPolygon']: ...

class MapLegend:
    def __init__(self, entries: List[Tuple[Color, str]]) -> None: ...

class MapLabel:
    def __init__(self, lat: float, lon: float, text: str, scale: float, *, fixed_size: bool = ...) -> None: ...

class Label:
    size_factor: Incomplete
    color: Incomplete
    def __init__(self, point: Point, *text: str, size_factor: float = ..., color: Color = ...) -> None: ...
    @property
    def point(self) -> Point: ...
    @property
    def text(self) -> Union[str, Tuple[str, ...]]: ...
    def serialize(self) -> dict: ...

class _SubResult(ABC, metaclass=abc.ABCMeta): ...

class _ViewResult(ABC, metaclass=abc.ABCMeta):
    def __init__(self, version: int) -> None: ...

class _DataSubResult(_SubResult):
    data: Incomplete
    def __init__(self, data: DataGroup) -> None: ...

class _GeometrySubResult(_SubResult):
    geometry: Incomplete
    geometry_type: Incomplete
    labels: Incomplete
    def __init__(self, geometry: Union[TransformableObject, Sequence[TransformableObject], File], labels: List[Label] = ..., *, geometry_type: str = ...) -> None: ...

class _ImageSubResult(_SubResult):
    image: Incomplete
    def __init__(self, image: File, image_type: Optional[str]) -> None: ...

class _GeoJSONSubResult(_SubResult):
    geojson: Incomplete
    labels: Incomplete
    legend: Incomplete
    interaction_groups: Incomplete
    def __init__(self, geojson: dict, labels: List[MapLabel] = ..., legend: MapLegend = ..., interaction_groups: Dict[str, Sequence[Union[int, str, MapFeature]]] = ...) -> None: ...

class _WebSubResult(_SubResult):
    html: Incomplete
    url: Incomplete
    def __init__(self, *, html: File = ..., url: str = ...) -> None: ...

class _PlotlySubResult(_SubResult):
    figure: Incomplete
    def __init__(self, figure: Union[str, dict]) -> None: ...

class _PDFSubResult(_SubResult):
    url: Incomplete
    file: Incomplete
    def __init__(self, *, file: File = ..., url: str = ...) -> None: ...

class GeometryResult(_ViewResult):
    geometry: Incomplete
    geometry_type: Incomplete
    labels: Incomplete
    def __init__(self, geometry: Union[TransformableObject, Sequence[TransformableObject], File], labels: List[Label] = ..., *, geometry_type: str = ...) -> None: ...

class GeometryAndDataResult(_ViewResult):
    geometry: Incomplete
    geometry_type: Incomplete
    labels: Incomplete
    data: Incomplete
    def __init__(self, geometry: Union[TransformableObject, Sequence[TransformableObject], File], data: DataGroup, labels: List[Label] = ..., *, geometry_type: str = ...) -> None: ...

class DataResult(_ViewResult):
    data: Incomplete
    def __init__(self, data: DataGroup) -> None: ...

class _ImageResult(_ViewResult):
    def __init__(self, image: File, image_type: str) -> None: ...

class ImageResult(_ViewResult):
    image: Incomplete
    def __init__(self, image: Union[StringIO, BytesIO, File]) -> None: ...
    @classmethod
    def from_path(cls, file_path: Union[str, bytes, os.PathLike]) -> ImageResult: ...

class _ImageAndDataResult(_ViewResult):
    data: Incomplete
    def __init__(self, image: File, image_type: str, data: DataGroup) -> None: ...

class ImageAndDataResult(_ViewResult):
    image: Incomplete
    data: Incomplete
    def __init__(self, image: Union[StringIO, BytesIO, File], data: DataGroup) -> None: ...

class GeoJSONResult(_ViewResult):
    labels: Incomplete
    legend: Incomplete
    interaction_groups: Incomplete
    def __init__(self, geojson: dict, labels: List[MapLabel] = ..., legend: MapLegend = ..., *, interaction_groups: Dict[str, Sequence[Union[int, str, MapFeature]]] = ...) -> None: ...
    @property
    def geojson(self) -> dict: ...
    @geojson.setter
    def geojson(self, value: dict) -> None: ...

class GeoJSONAndDataResult(_ViewResult):
    data: Incomplete
    labels: Incomplete
    legend: Incomplete
    interaction_groups: Incomplete
    def __init__(self, geojson: dict, data: DataGroup, labels: List[MapLabel] = ..., legend: MapLegend = ..., *, interaction_groups: Dict[str, Sequence[Union[int, str, MapFeature]]] = ...) -> None: ...
    @property
    def geojson(self) -> dict: ...
    @geojson.setter
    def geojson(self, value: dict) -> None: ...

class MapResult(GeoJSONResult):
    def __init__(self, features: List[MapFeature], labels: List[MapLabel] = ..., legend: MapLegend = ..., *, interaction_groups: Dict[str, Sequence[Union[int, str, MapFeature]]] = ...) -> None: ...
    @property
    def features(self) -> List[MapFeature]: ...
    @features.setter
    def features(self, value: List[MapFeature]) -> None: ...
    @property
    def geojson(self) -> dict: ...
    @geojson.setter
    def geojson(self, value: dict) -> None: ...

class MapAndDataResult(GeoJSONAndDataResult):
    def __init__(self, features: List[MapFeature], data: DataGroup, labels: List[MapLabel] = ..., legend: MapLegend = ..., *, interaction_groups: Dict[str, Sequence[Union[int, str, MapFeature]]] = ...) -> None: ...
    @property
    def features(self) -> List[MapFeature]: ...
    @features.setter
    def features(self, value: List[MapFeature]) -> None: ...
    @property
    def geojson(self) -> dict: ...
    @geojson.setter
    def geojson(self, value: dict) -> None: ...

class WebResult(_ViewResult):
    html: Incomplete
    url: Incomplete
    def __init__(self, *, html: Union[StringIO, File, str] = ..., url: str = ...) -> None: ...
    @classmethod
    def from_path(cls, file_path: Union[str, bytes, os.PathLike]) -> WebResult: ...

class WebAndDataResult(_ViewResult):
    html: Incomplete
    url: Incomplete
    data: Incomplete
    def __init__(self, *, html: Union[StringIO, File, str] = ..., url: str = ..., data: DataGroup = ...) -> None: ...

class PlotlyResult(_ViewResult):
    figure: Incomplete
    def __init__(self, figure: Union[str, dict]) -> None: ...

class PlotlyAndDataResult(_ViewResult):
    figure: Incomplete
    data: Incomplete
    def __init__(self, figure: Union[str, dict], data: DataGroup) -> None: ...

class PDFResult(_ViewResult):
    file: Incomplete
    url: Incomplete
    def __init__(self, *, file: File = ..., url: str = ...) -> None: ...
    @classmethod
    def from_path(cls, file_path: Union[str, bytes, os.PathLike]) -> PDFResult: ...

class SummaryItem:
    def __init__(self, label: str, item_type: Type[Union[str, float]], source: str, value_path: str, *, suffix: str = ..., prefix: str = ...) -> None: ...

class Summary(OrderedDict):
    def __init__(self, **items: SummaryItem) -> None: ...

class View(ABC, metaclass=abc.ABCMeta):
    def __init__(self, label: str, duration_guess: int, *, description: str = ..., update_label: str = ..., **kwargs: Any) -> None: ...
    def __call__(self, view_function: Callable) -> Callable: ...

class GeometryView(View):
    def __init__(self, label: str, duration_guess: int, *, description: str = ..., update_label: str = ..., view_mode: str = ..., default_shadow: bool = ..., up_axis: str = ...) -> None: ...

class DataView(View): ...

class GeometryAndDataView(View):
    def __init__(self, label: str, duration_guess: int, *, description: str = ..., update_label: str = ..., view_mode: str = ..., default_shadow: bool = ..., up_axis: str = ...) -> None: ...

class GeoJSONView(View): ...
class GeoJSONAndDataView(View): ...
class MapView(View): ...
class MapAndDataView(View): ...
class ImageView(View): ...
class ImageAndDataView(View): ...
class WebView(View): ...
class WebAndDataView(View): ...
class PlotlyView(View): ...
class PlotlyAndDataView(View): ...
class PDFView(View): ...

class InteractionEvent:
    type: Incomplete
    value: Incomplete
    def __init__(self, event_type: str, value: Any) -> None: ...
