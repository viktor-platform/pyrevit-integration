import xml.etree.ElementTree as ET
import abc
import json
from ...core import File as File
from ...errors import ExecutionError as ExecutionError, InternalError as InternalError, ParsingError as ParsingError
from ..external_program import ExternalProgram as ExternalProgram
from .objects import BarSurface as BarSurface, CalculationSetup as CalculationSetup, CheckMember as CheckMember, CheckMember1D as CheckMember1D, CheckSection as CheckSection, CheckSectionExtreme as CheckSectionExtreme, CodeSettings as CodeSettings, ConcAggregateType as ConcAggregateType, ConcCementClass as ConcCementClass, ConcDependentParams as ConcDependentParams, ConcDiagramType as ConcDiagramType, ConcreteMaterial as ConcreteMaterial, ConcreteMemberDataEc2 as ConcreteMemberDataEc2, CrossSection as CrossSection, CrossSectionComponent as CrossSectionComponent, CrossSectionParameter as CrossSectionParameter, CrossSectionType as CrossSectionType, ExposureClassesDataEc2 as ExposureClassesDataEc2, FatigueLoading as FatigueLoading, LoadingSLS as LoadingSLS, LoadingULS as LoadingULS, MatConcrete as MatConcrete, MatConcreteEc2 as MatConcreteEc2, MatReinforcement as MatReinforcement, MatReinforcementEc2 as MatReinforcementEc2, MemberType as MemberType, ProjectData as ProjectData, ReinfClass as ReinfClass, ReinfDiagramType as ReinfDiagramType, ReinfFabrication as ReinfFabrication, ReinfType as ReinfType, ReinforcedBar as ReinforcedBar, ReinforcedCrossSection as ReinforcedCrossSection, ReinforcementMaterial as ReinforcementMaterial, StandardCheckSection as StandardCheckSection, Stirrup as Stirrup, ThermalState as ThermalState, TwoWaySlabType as TwoWaySlabType
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from io import BytesIO, StringIO
from typing import Any, BinaryIO, Dict, Iterator, List, Optional, Sequence, Tuple, Union

class IdeaRcsAnalysis(ExternalProgram):
    input_file: Incomplete
    def __init__(self, input_file: Union[BytesIO, File], *, return_result_xml: bool = ..., return_rcs_file: bool = ...) -> None: ...
    def get_output_file(self, *, as_file: bool = ...) -> Optional[Union[BytesIO, File]]: ...
    def get_idea_rcs_file(self, *, as_file: bool = ...) -> Optional[Union[BytesIO, File]]: ...

class _Model:
    def __init__(self, project_data: ProjectData = ..., code_settings: CodeSettings = ...) -> None: ...
    @property
    def project_data(self) -> ProjectData: ...
    @property
    def code_settings(self) -> CodeSettings: ...
    def generate_xml_input(self, *, as_file: bool = ...) -> Union[BytesIO, File]: ...

class _EnumEncoder(json.JSONEncoder):
    def default(self, o: Any) -> Any: ...

class OpenModel(_Model):
    def __init__(self, *, project_data: ProjectData = ..., code_settings: CodeSettings = ...) -> None: ...
    def create_matconcrete_ec2(self, base_material: ConcreteMaterial, name: str = ..., *, e_modulus: float = ..., g_modulus: float = ..., poisson: float = ..., unit_mass: float = ..., specific_heat: float = ..., thermal_expansion: float = ..., thermal_conductivity: float = ..., is_default: bool = ..., order_in_code: int = ..., thermal_state: ThermalState = ..., fck_28: float = ..., stone_diameter: float = ..., cement_class: ConcCementClass = ..., aggregate_type: ConcAggregateType = ..., diagram_type: ConcDiagramType = ..., silica_fume: bool = ..., plain_concrete_diagram: bool = ..., dep_params: ConcDependentParams = ...) -> MatConcreteEc2: ...
    def create_matreinforcement_ec2(self, base_material: ReinforcementMaterial, name: str = ..., *, e_modulus: float = ..., g_modulus: float = ..., poisson: float = ..., unit_mass: float = ..., specific_heat: float = ..., thermal_expansion: float = ..., thermal_conductivity: float = ..., is_default: bool = ..., order_in_code: int = ..., thermal_state: ThermalState = ..., bar_surface: BarSurface = ..., fyk: float = ..., ftk_by_fyk: float = ..., epsuk: float = ..., ftk: float = ..., class_: ReinfClass = ..., type_: ReinfType = ..., fabrication: ReinfFabrication = ..., diagram_type: ReinfDiagramType = ...) -> MatReinforcementEc2: ...
    def create_cross_section_component(self, name: str = ...) -> CrossSectionComponent: ...
    def create_cross_section_parameter(self, cross_section_type: CrossSectionType, material: MatConcrete, name: str = ..., **parameters: Any) -> CrossSectionParameter: ...
    def create_reinforced_cross_section(self, cross_section: CrossSection, name: str = ...) -> ReinforcedCrossSection: ...
    def create_check_member1d(self) -> CheckMember1D: ...
    def add_check_section(self, check_member: CheckMember, reinf_section: ReinforcedCrossSection, description: str = ...) -> CheckSection: ...
    def add_member_data_ec2(self, member: CheckMember, member_type: MemberType, two_way_slab_type: TwoWaySlabType, *, calculation_setup: CalculationSetup = ..., coeff_kx_for_wmax: float = ..., exposure_class_data: ExposureClassesDataEc2 = ..., creep_coefficient: float = ..., relative_humidity: float = ...) -> None: ...

class _SectionPrototype(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self): ...

class SectionPrototype1D(_SectionPrototype, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self): ...

class RectSection(SectionPrototype1D):
    def __init__(self, width: float, height: float) -> None: ...

class GeneralShape(SectionPrototype1D):
    def __init__(self, outline: Sequence[Tuple[float, float]], *, openings: Sequence[Sequence[Tuple[float, float]]] = ...) -> None: ...

class _SectionPrototype2D(_SectionPrototype, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, thickness: float): ...

class Member:
    def __init__(self, rcs: ReinforcedCrossSection, check_section: CheckSection) -> None: ...
    @property
    def bars(self) -> List[ReinforcedBar]: ...
    @property
    def stirrups(self) -> List[Stirrup]: ...
    @property
    def extremes(self) -> List[CheckSectionExtreme]: ...
    def create_bar(self, coordinates: Tuple[float, float], diameter: float, material: MatReinforcement) -> None: ...
    def create_bar_layer(self, *, origin: Tuple[float, float], diameter: float, material: MatReinforcement, number_of_bars: int, delta_y: float = ..., delta_z: float = ...) -> None: ...
    def create_stirrup(self, points: Sequence[Union[Tuple[float, float], Tuple[Tuple[float, float], Tuple[float, float]]]], diameter: float, material: MatReinforcement, distance: float, shear_check: bool = ..., torsion_check: bool = ..., mandrel_diameter_factor: float = ..., anchorage_length: float = ...) -> None: ...
    def create_extreme(self, *, accidental: LoadingULS = ..., fatigue: FatigueLoading = ..., frequent: LoadingSLS = ..., fundamental: LoadingULS = ..., characteristic: LoadingSLS = ..., quasi_permanent: LoadingSLS = ...) -> None: ...

class Beam(Member): ...
class CompressionMember(Member): ...
class OneWaySlab(Member): ...

class Model(_Model):
    def __init__(self, *, project_data: ProjectData = ..., code_settings: CodeSettings = ...) -> None: ...
    def create_concrete_material(self, base_material: ConcreteMaterial, name: str = ..., *, unit_mass: float = ..., fck: float = ..., stone_diameter: float = ..., cement_class: ConcCementClass = ..., aggregate_type: ConcAggregateType = ..., diagram_type: ConcDiagramType = ..., silica_fume: bool = ..., plain_concrete_diagram: bool = ..., dep_params: ConcDependentParams = ...) -> MatConcreteEc2: ...
    def create_reinforcement_material(self, base_material: ReinforcementMaterial, name: str = ..., *, unit_mass: float = ..., e_modulus: float = ..., fyk: float = ..., ftk_by_fyk: float = ..., epsuk: float = ..., type_: ReinfType = ..., bar_surface: BarSurface = ..., class_: ReinfClass = ..., fabrication: ReinfFabrication = ..., diagram_type: ReinfDiagramType = ...) -> MatReinforcementEc2: ...
    def create_beam(self, cs: SectionPrototype1D, material: MatConcrete, *, calculation_control: CalculationSetup = ..., name: str = ..., rcs_name: str = ..., exposure_classes: ExposureClassesDataEc2 = ..., coeff_kx: float = ..., creep_coefficient: float = ..., relative_humidity: float = ...) -> Beam: ...
    def create_compression_member(self, cs: SectionPrototype1D, material: MatConcrete, *, calculation_control: CalculationSetup = ..., name: str = ..., rcs_name: str = ..., exposure_classes: ExposureClassesDataEc2 = ..., coeff_kx: float = ..., creep_coefficient: float = ..., relative_humidity: float = ...) -> CompressionMember: ...
    def create_one_way_slab(self, cs: SectionPrototype1D, material: MatConcrete, *, calculation_control: CalculationSetup = ..., name: str = ..., rcs_name: str = ..., exposure_classes: ExposureClassesDataEc2 = ..., coeff_kx: float = ..., creep_coefficient: float = ..., relative_humidity: float = ...) -> OneWaySlab: ...

class RcsOutputFileParser:
    def __init__(self, xml_file: BinaryIO) -> None: ...
    def section_result(self, id_: int) -> RcsOutputFileParser.SectionResult: ...
    def section_results(self) -> Iterator['RcsOutputFileParser.SectionResult']: ...
    class SectionResult:
        def __init__(self, id_: int, element: ET.Element) -> None: ...
        @property
        def id_(self) -> int: ...
        def extremes(self) -> List[dict]: ...
        def capacity(self) -> List[Optional[dict]]: ...
        def shear(self) -> List[Optional[dict]]: ...
        def torsion(self) -> List[Optional[dict]]: ...
        def interaction(self) -> List[Optional[dict]]: ...
        def crack_width(self) -> List[Optional[dict]]: ...
        def detailing(self) -> List[Optional[dict]]: ...
        def stress_limitation(self) -> List[Optional[dict]]: ...
        def fatigue(self) -> List[Optional[dict]]: ...

class OutputFileParser:
    def __init__(self, xml_file: StringIO) -> None: ...
    @property
    def section_ids(self) -> List[int]: ...
    def raw_results(self) -> dict: ...
    def capacity_results(self, section_id: int) -> List[Optional[Dict[str, Any]]]: ...
    def shear_results(self, section_id: int) -> List[Optional[Dict[str, Any]]]: ...
    def crack_width_results(self, section_id: int) -> List[Optional[Dict[str, Optional[Dict[str, Any]]]]]: ...
    def detailing_results(self, section_id: int) -> List[Optional[Dict[str, Optional[float]]]]: ...
    def stress_limitation_results(self, section_id: int) -> List[Optional[Dict[str, Optional[float]]]]: ...
    def fatigue_results(self, section_id: int) -> List[Optional[dict]]: ...
