from ...core import File as File
from ...errors import ExecutionError as ExecutionError, InternalError as InternalError, LicenseError as LicenseError, SciaParsingError as SciaParsingError
from ...geometry import Vector as Vector
from ..external_program import ExternalProgram as ExternalProgram
from .object import ArbitraryProfile as ArbitraryProfile, ArbitraryProfileSpan as ArbitraryProfileSpan, AveragingStrip as AveragingStrip, Beam as Beam, CircularComposedCrossSection as CircularComposedCrossSection, CircularCrossSection as CircularCrossSection, CircularHollowCrossSection as CircularHollowCrossSection, Concrete as Concrete, CrossLink as CrossLink, CrossSection as CrossSection, FreeLineLoad as FreeLineLoad, FreePointLoad as FreePointLoad, FreeSurfaceLoad as FreeSurfaceLoad, HingeOnBeam as HingeOnBeam, HingeOnPlane as HingeOnPlane, IntegrationStrip as IntegrationStrip, InternalEdge as InternalEdge, Layer as Layer, LibraryCrossSection as LibraryCrossSection, LineForceSurface as LineForceSurface, LineLoad as LineLoad, LineMomentOnBeam as LineMomentOnBeam, LineMomentOnPlane as LineMomentOnPlane, LineSupportLine as LineSupportLine, LineSupportSurface as LineSupportSurface, LoadCase as LoadCase, LoadCombination as LoadCombination, LoadGroup as LoadGroup, Material as Material, MeshSetup as MeshSetup, Node as Node, NonLinearFunction as NonLinearFunction, NonLinearLoadCombination as NonLinearLoadCombination, NumericalCrossSection as NumericalCrossSection, OpenSlab as OpenSlab, Orthotropy as Orthotropy, PermanentLoadCase as PermanentLoadCase, Plane as Plane, PointLoad as PointLoad, PointLoadNode as PointLoadNode, PointMomentNode as PointMomentNode, PointSupport as PointSupport, PointSupportLine as PointSupportLine, ProjectData as ProjectData, RectangularCrossSection as RectangularCrossSection, ResultClass as ResultClass, RigidArm as RigidArm, SciaObject as SciaObject, SectionOnBeam as SectionOnBeam, SectionOnPlane as SectionOnPlane, Selection as Selection, SolverSetup as SolverSetup, Subsoil as Subsoil, SurfaceLoad as SurfaceLoad, SurfaceSupportSurface as SurfaceSupportSurface, ThermalLoad as ThermalLoad, ThermalSurfaceLoad as ThermalSurfaceLoad, VariableLoadCase as VariableLoadCase
from _typeshed import Incomplete
from enum import Enum
from io import BytesIO
from typing import BinaryIO, Dict, List, Optional, Tuple, Union

class CalcSetting(Enum):
    NONE: CalcSetting
    NOC: CalcSetting
    LIN: CalcSetting
    NEL: CalcSetting
    EIG: CalcSetting
    STB: CalcSetting
    INF: CalcSetting
    MOB: CalcSetting
    TDA: CalcSetting
    SLN: CalcSetting
    PHA: CalcSetting
    NPH: CalcSetting
    CSS: CalcSetting
    NST: CalcSetting
    TID: CalcSetting

class ResultType(Enum):
    NONE: ResultType
    MODEL: ResultType
    ENGINEERING_REPORT: ResultType

class SciaAnalysis(ExternalProgram):
    input_file: Incomplete
    xml_def_file: Incomplete
    scia_model: Incomplete
    calculation_setting: Incomplete
    xml_doc_name: Incomplete
    def __init__(self, input_file: Union[BytesIO, File], xml_def_file: Union[BytesIO, File], scia_model: Union[BytesIO, File], calculation_setting: CalcSetting = ..., xml_doc_name: str = ..., *, result_type: ResultType = ..., output_document: str = ...) -> None: ...
    @staticmethod
    def get_xml_def_name(input_file: BinaryIO) -> str: ...
    def get_xml_output_file(self, as_file: bool = ...) -> Optional[Union[BytesIO, File]]: ...
    def get_updated_esa_model(self, as_file: bool = ...) -> Optional[Union[BytesIO, File]]: ...
    def get_engineering_report(self, as_file: bool = ...) -> Optional[Union[BytesIO, File]]: ...

class Model:
    def __init__(self, *, mesh_setup: MeshSetup = ..., solver_setup: SolverSetup = ..., project_data: ProjectData = ...) -> None: ...
    @property
    def layers(self) -> Tuple[Layer, ...]: ...
    @property
    def concrete_materials(self) -> Tuple[Concrete, ...]: ...
    @property
    def nonlinear_functions(self) -> Tuple[NonLinearFunction, ...]: ...
    @property
    def subsoils(self) -> Tuple[Subsoil, ...]: ...
    @property
    def orthotropy_objects(self) -> Tuple[Orthotropy, ...]: ...
    @property
    def selections(self) -> Tuple[Selection, ...]: ...
    @property
    def cross_sections(self) -> Tuple[CrossSection, ...]: ...
    @property
    def nodes(self) -> Tuple[Node, ...]: ...
    @property
    def beams(self) -> Tuple[Beam, ...]: ...
    @property
    def cross_links(self) -> Tuple[CrossLink, ...]: ...
    @property
    def arbitrary_profiles(self) -> Tuple[ArbitraryProfile, ...]: ...
    @property
    def hinges_on_beam(self) -> Tuple[HingeOnBeam, ...]: ...
    @property
    def hinges_on_plane(self) -> Tuple[HingeOnPlane, ...]: ...
    @property
    def sections_on_beam(self) -> Tuple[SectionOnBeam, ...]: ...
    @property
    def sections_on_plane(self) -> Tuple[SectionOnPlane, ...]: ...
    @property
    def planes(self) -> Tuple[Plane, ...]: ...
    @property
    def open_slabs(self) -> Tuple[OpenSlab, ...]: ...
    @property
    def internal_edges(self) -> Tuple[InternalEdge, ...]: ...
    @property
    def rigid_arms(self) -> Tuple[RigidArm, ...]: ...
    @property
    def point_supports(self) -> Tuple[PointSupport, ...]: ...
    @property
    def point_supports_line(self) -> Tuple[PointSupportLine, ...]: ...
    @property
    def line_supports_line(self) -> Tuple[LineSupportLine, ...]: ...
    @property
    def line_supports_surface(self) -> Tuple[LineSupportSurface, ...]: ...
    @property
    def surface_supports(self) -> Tuple[SurfaceSupportSurface, ...]: ...
    @property
    def load_cases(self) -> Tuple[LoadCase, ...]: ...
    @property
    def load_groups(self) -> Tuple[LoadGroup, ...]: ...
    @property
    def load_combinations(self) -> Tuple[LoadCombination, ...]: ...
    @property
    def nonlinear_load_combinations(self) -> Tuple[NonLinearLoadCombination, ...]: ...
    @property
    def result_classes(self) -> Tuple[ResultClass, ...]: ...
    @property
    def point_loads_node(self) -> Tuple[PointLoadNode, ...]: ...
    @property
    def point_loads(self) -> Tuple[PointLoad, ...]: ...
    @property
    def point_moments_node(self) -> Tuple[PointMomentNode, ...]: ...
    @property
    def line_loads(self) -> Tuple[LineLoad, ...]: ...
    @property
    def line_moments_on_beam(self) -> Tuple[LineMomentOnBeam, ...]: ...
    @property
    def line_moments_on_plane(self) -> Tuple[LineMomentOnPlane, ...]: ...
    @property
    def line_force_surface_list(self) -> Tuple[LineForceSurface, ...]: ...
    @property
    def surface_loads(self) -> Tuple[SurfaceLoad, ...]: ...
    @property
    def thermal_loads(self) -> Tuple[ThermalLoad, ...]: ...
    @property
    def thermal_surface_loads(self) -> Tuple[ThermalSurfaceLoad, ...]: ...
    @property
    def free_surface_loads(self) -> Tuple[FreeSurfaceLoad, ...]: ...
    @property
    def free_line_loads(self) -> Tuple[FreeLineLoad, ...]: ...
    @property
    def free_point_loads(self) -> Tuple[FreePointLoad, ...]: ...
    @property
    def integration_strips(self) -> Tuple[IntegrationStrip, ...]: ...
    @property
    def averaging_strips(self) -> Tuple[AveragingStrip, ...]: ...
    @property
    def mesh_setup(self) -> MeshSetup: ...
    @property
    def solver_setup(self) -> SolverSetup: ...
    @property
    def project_data(self) -> ProjectData: ...
    def create_layer(self, name: str = ..., *, comment: str = ..., structural_model_only: bool = ..., current_used_activity: bool = ...) -> Layer: ...
    def update_concrete_material(self, object_id: int, name: str, part: Concrete.ECPart, thermal_expansion: float = ..., unit_mass: float = ..., wet_density: float = ..., e_modulus: float = ..., poisson: float = ..., g_modulus: float = ..., log_decrement: float = ..., specific_heat: float = ..., thermal_conductivity: float = ..., *, fck: float = ...) -> Concrete: ...
    def create_nonlinear_function(self, name: str, function_type: NonLinearFunction.Type, positive_end: NonLinearFunction.Support, negative_end: NonLinearFunction.Support, impulse: List[Tuple[float, float]]) -> NonLinearFunction: ...
    def create_subsoil(self, name: str, *, stiffness: float, c1x: float = ..., c1y: float = ..., c1z: Subsoil.C1z = ..., nonlinear_function: NonLinearFunction = ..., c2x: float = ..., c2y: float = ..., is_drained: bool = ..., water_air_in_clay_subgrade: bool = ..., specific_weight: float = ..., fi: float = ..., sigma_oc: float = ..., c: float = ..., cu: float = ...) -> Subsoil: ...
    def create_orthotropy(self, name: str, material: Material, thickness: float, D11: float = ..., D22: float = ..., D12: float = ..., D33: float = ..., D44: float = ..., D55: float = ..., d11: float = ..., d22: float = ..., d12: float = ..., d33: float = ..., kxy: float = ..., kyx: float = ...) -> Orthotropy: ...
    def create_selection(self, name: str, objects: List[SciaObject]) -> Selection: ...
    def create_arbitrary_profile_span(self, length: float, type_of_css: ArbitraryProfileSpan.TypeOfCss, cross_section_start: CrossSection, cross_section_end: CrossSection, alignment: ArbitraryProfileSpan.Alignment) -> ArbitraryProfileSpan: ...
    def create_rectangular_cross_section(self, name: str, material: Material, width: float, height: float) -> RectangularCrossSection: ...
    def create_circular_cross_section(self, name: str, material: Material, diameter: float) -> CircularCrossSection: ...
    def create_circular_hollow_cross_section(self, name: str, material: Material, diameter: float, thickness: float) -> CircularHollowCrossSection: ...
    def create_circular_composed_cross_section(self, name: str, material: Material, material_2: Material, diameter: float, thickness: float) -> CircularComposedCrossSection: ...
    def create_numerical_cross_section(self, name: str, material: Material, *, A: float = ..., Ay: float = ..., Az: float = ..., AL: float = ..., AD: float = ..., cYUCS: float = ..., cZUCS: float = ..., alpha: float = ..., Iy: float = ..., Iz: float = ..., Wely: float = ..., Welz: float = ..., Wply: float = ..., Wplz: float = ..., Mply_plus: float = ..., Mply_min: float = ..., Mplz_plus: float = ..., Mplz_min: float = ..., dy: float = ..., dz: float = ..., It: float = ..., Iw: float = ..., beta_y: float = ..., beta_z: float = ...) -> NumericalCrossSection: ...
    def create_library_cross_section(self, section: LibraryCrossSection.Section, profile: str, material: Material, *, name: str = ...) -> LibraryCrossSection: ...
    def create_node(self, name: str, x: float, y: float, z: float) -> Node: ...
    def create_beam(self, begin_node: Node, end_node: Node, cross_section: CrossSection, *, name: str = ..., ez: float = ..., lcs_rotation: float = ..., layer: Layer = ...) -> Beam: ...
    def create_cross_link(self, beam_1: Beam, beam_2: Beam, *, name: str = ...) -> CrossLink: ...
    def create_arbitrary_profile(self, name: str, beam: Beam, c_def: ArbitraryProfile.CDef, cross_section: CrossSection, spans: List[ArbitraryProfileSpan]) -> ArbitraryProfile: ...
    def create_hinge_on_beam(self, beam: Beam, position: HingeOnBeam.Position, *, name: str = ..., freedom_ux: HingeOnBeam.Freedom = ..., freedom_uy: HingeOnBeam.Freedom = ..., freedom_uz: HingeOnBeam.Freedom = ..., freedom_fix: HingeOnBeam.Freedom = ..., freedom_fiy: HingeOnBeam.Freedom = ..., freedom_fiz: HingeOnBeam.Freedom = ..., stiffness_ux: float = ..., stiffness_uy: float = ..., stiffness_uz: float = ..., stiffness_fix: float = ..., stiffness_fiy: float = ..., stiffness_fiz: float = ...) -> HingeOnBeam: ...
    def create_section_on_beam(self, name: str, beam: Beam, c_def: SectionOnBeam.CDef, position_x: float, origin: SectionOnBeam.Origin, repeat: int, delta_x: float) -> SectionOnBeam: ...
    def create_section_on_plane(self, point_1: Tuple[float, float, float], point_2: Tuple[float, float, float], *, name: str, draw: SectionOnPlane.Draw = ..., direction_of_cut: Tuple[float, float, float] = ...) -> SectionOnPlane: ...
    def create_rigid_arm(self, name: str, master_node: Node, slave_node: Node, hinge_on_master: bool, hinge_on_slave: bool) -> RigidArm: ...
    def create_plane(self, corner_nodes: List[Node], thickness: float, *, material: Material, name: str = ..., plane_type: Plane.Type = ..., layer: Layer = ..., internal_nodes: List[Node] = ..., swap_orientation: bool = ..., lcs_rotation: float = ..., fem_model: Plane.FEMModel = ..., orthotropy: Orthotropy = ...) -> Plane: ...
    def create_circular_plane(self, center_node: Node, diameter: float, thickness: float, *, material: Material, axis: Union[Vector, Tuple[float, float, float]] = ..., name: str = ..., plane_type: Plane.Type = ..., layer: Layer = ..., internal_nodes: List[Node] = ..., swap_orientation: bool = ..., lcs_rotation: float = ..., fem_model: Plane.FEMModel = ..., orthotropy: Orthotropy = ...) -> Plane: ...
    def create_open_slab(self, name: str, plane: Plane, corner_nodes: List[Node]) -> OpenSlab: ...
    def create_internal_edge(self, plane: Plane, node_1: Node, node_2: Node, *, name: str = ...) -> InternalEdge: ...
    def create_integration_strip(self, plane: Plane, point_1: Tuple[float, float, float], point_2: Tuple[float, float, float], width: float) -> IntegrationStrip: ...
    def create_averaging_strip(self, plane: Plane, *, strip_type: AveragingStrip.Type, point_1: Tuple[float, float, float], width: float, length: float, angle: float, direction: AveragingStrip.Direction, name: str = ...) -> AveragingStrip: ...
    def create_point_support(self, name: str, node: Node, spring_type: PointSupport.Type, freedom: Tuple[PointSupport.Freedom, PointSupport.Freedom, PointSupport.Freedom, PointSupport.Freedom, PointSupport.Freedom, PointSupport.Freedom], stiffness: Tuple[float, float, float, float, float, float], c_sys: PointSupport.CSys, default_size: float = ..., *, angle: Tuple[float, float, float] = ...) -> PointSupport: ...
    def create_point_support_on_beam(self, beam: Beam, *, name: str = ..., x: PointSupportLine.Freedom = ..., stiffness_x: float = ..., y: PointSupportLine.Freedom = ..., stiffness_y: float = ..., z: PointSupportLine.Freedom = ..., stiffness_z: float = ..., rx: PointSupportLine.Freedom = ..., stiffness_rx: float = ..., ry: PointSupportLine.Freedom = ..., stiffness_ry: float = ..., rz: PointSupportLine.Freedom = ..., stiffness_rz: float = ..., default_size: float = ..., c_sys: PointSupportLine.CSys = ..., c_def: PointSupportLine.CDef = ..., position_x: float = ..., origin: PointSupportLine.Origin = ..., repeat: int = ..., delta_x: float = ...) -> PointSupportLine: ...
    def create_line_support_on_beam(self, beam: Beam, *, name: str = ..., x: LineSupportLine.Freedom = ..., stiffness_x: float = ..., function_x: NonLinearFunction = ..., y: LineSupportLine.Freedom = ..., stiffness_y: float = ..., function_y: NonLinearFunction = ..., z: LineSupportLine.Freedom = ..., stiffness_z: float = ..., function_z: NonLinearFunction = ..., rx: LineSupportLine.Freedom = ..., stiffness_rx: float = ..., function_rx: NonLinearFunction = ..., ry: LineSupportLine.Freedom = ..., stiffness_ry: float = ..., function_ry: NonLinearFunction = ..., rz: LineSupportLine.Freedom = ..., stiffness_rz: float = ..., function_rz: NonLinearFunction = ..., c_sys: LineSupportLine.CSys = ..., extent: LineSupportLine.Extent = ..., c_def: LineSupportLine.CDef = ..., position_x1: float = ..., position_x2: float = ..., origin: LineSupportLine.Origin = ...) -> LineSupportLine: ...
    def create_line_support_on_plane(self, edge: Union[Tuple[Plane, int], InternalEdge], *, name: str = ..., x: LineSupportSurface.Freedom = ..., stiffness_x: float = ..., y: LineSupportSurface.Freedom = ..., stiffness_y: float = ..., z: LineSupportSurface.Freedom = ..., stiffness_z: float = ..., rx: LineSupportSurface.Freedom = ..., stiffness_rx: float = ..., ry: LineSupportSurface.Freedom = ..., stiffness_ry: float = ..., rz: LineSupportSurface.Freedom = ..., stiffness_rz: float = ..., c_sys: LineSupportSurface.CSys = ..., c_def: LineSupportSurface.CDef = ..., position_x1: float = ..., position_x2: float = ..., origin: LineSupportSurface.Origin = ...) -> LineSupportSurface: ...
    def create_surface_support(self, plane: Plane, subsoil: Subsoil, *, name: str = ...) -> SurfaceSupportSurface: ...
    def create_hinge_on_plane(self, edge: Union[Tuple[Plane, int], InternalEdge], *, name: str = ..., ux: HingeOnPlane.Freedom = ..., stiffness_ux: float = ..., uy: HingeOnPlane.Freedom = ..., stiffness_uy: float = ..., uz: HingeOnPlane.Freedom = ..., stiffness_uz: float = ..., fix: HingeOnPlane.Freedom = ..., stiffness_fix: float = ..., c_def: HingeOnPlane.CDef = ..., position_x1: float = ..., position_x2: float = ..., origin: HingeOnPlane.Origin = ...) -> HingeOnPlane: ...
    def create_load_group(self, name: str, load_option: LoadGroup.LoadOption, relation: LoadGroup.RelationOption = ..., load_type: LoadGroup.LoadTypeOption = ...) -> LoadGroup: ...
    def create_permanent_load_case(self, name: str, description: str, load_group: LoadGroup, load_type: LoadCase.PermanentLoadType, direction: LoadCase.Direction = ..., primary_effect: LoadCase = ...) -> PermanentLoadCase: ...
    def create_variable_load_case(self, name: str, description: str, load_group: LoadGroup, load_type: LoadCase.VariableLoadType, specification: LoadCase.Specification = ..., duration: LoadCase.Duration = ..., primary_effect: LoadCase = ...) -> VariableLoadCase: ...
    def create_load_combination(self, name: str, load_type: LoadCombination.Type, load_cases: Dict[LoadCase, float], *, description: str = ...) -> LoadCombination: ...
    def create_nonlinear_load_combination(self, load_type: NonLinearLoadCombination.Type, load_cases: Dict[LoadCase, float], *, name: str = ..., description: str = ...) -> NonLinearLoadCombination: ...
    def create_result_class(self, name: str, combinations: List[LoadCombination] = ..., nonlinear_combinations: List[NonLinearLoadCombination] = ...) -> ResultClass: ...
    def create_point_load_node(self, node: Node, load_case: LoadCase, load: float, *, name: str = ..., direction: PointLoadNode.Direction = ..., c_sys: PointLoadNode.CSys = ..., angle: Tuple[float, float, float] = ...) -> PointLoadNode: ...
    def create_point_load(self, name: str, load_case: LoadCase, beam: Beam, direction: PointLoad.Direction, load_type: PointLoad.Type, load_value: float, c_sys: PointLoad.CSys = ..., c_def: PointLoad.CDef = ..., position_x: float = ..., origin: PointLoad.Origin = ..., repeat: int = ..., ey: float = ..., ez: float = ..., *, angle: Tuple[float, float, float] = ...) -> PointLoad: ...
    def create_point_moment_node(self, node: Node, load_case: LoadCase, load: float, direction: PointMomentNode.Direction, name: str = ..., c_sys: PointMomentNode.CSys = ...) -> PointMomentNode: ...
    def create_line_load(self, name: str, load_case: LoadCase, beam: Beam, load_type: LineLoad.Type, distribution: LineLoad.Distribution, load_start: float, load_end: float, direction: LineLoad.Direction, position_start: float, position_end: float, c_def: LineLoad.CDef, c_sys: LineLoad.CSys, origin: LineLoad.Origin, ey: float, ez: float) -> LineLoad: ...
    def create_line_moment_on_beam(self, beam: Beam, load_case: LoadCase, m1: float, m2: float = ..., *, name: str = ..., direction: LineMomentOnBeam.Direction = ..., c_def: LineMomentOnBeam.CDef = ..., position_x1: float = ..., position_x2: float = ..., origin: LineMomentOnBeam.Origin = ...) -> LineMomentOnBeam: ...
    def create_line_moment_on_plane(self, edge: Union[Tuple[Plane, int], InternalEdge], m1: float, m2: float = ..., *, load_case: LoadCase, name: str = ..., direction: LineMomentOnPlane.Direction = ..., c_def: LineMomentOnPlane.CDef = ..., position_x1: float = ..., position_x2: float = ..., origin: LineMomentOnPlane.Origin = ...) -> LineMomentOnPlane: ...
    def create_line_load_on_plane(self, edge: Union[Tuple[Plane, int], InternalEdge], p1: float, p2: float = ..., *, load_case: LoadCase, direction: LineForceSurface.Direction = ..., name: str = ..., location: LineForceSurface.Location = ..., c_sys: LineForceSurface.CSys = ..., c_def: LineForceSurface.CDef = ..., position_x1: float = ..., position_x2: float = ..., origin: LineForceSurface.Origin = ...) -> LineForceSurface: ...
    def create_surface_load(self, name: str, load_case: LoadCase, plane: Plane, direction: SurfaceLoad.Direction, load_type: SurfaceLoad.Type, load_value: float, c_sys: SurfaceLoad.CSys, location: SurfaceLoad.Location) -> SurfaceLoad: ...
    def create_thermal_load(self, name: str, load_case: LoadCase, beam: Beam, distribution: ThermalLoad.Distribution, delta: float, left_delta: float, right_delta: float, top_delta: float, bottom_delta: float, position_start: float, position_end: float, c_def: ThermalLoad.CDef, origin: ThermalLoad.Origin) -> ThermalLoad: ...
    def create_thermal_surface_load(self, name: str, load_case: LoadCase, plane: Plane, delta: float = ..., top_delta: float = ..., bottom_delta: float = ...) -> ThermalSurfaceLoad: ...
    def create_free_surface_load(self, name: str, load_case: LoadCase, direction: FreeSurfaceLoad.Direction, q1: float, q2: float = ..., q3: float = ..., points: List[Tuple[float, float]] = ..., *, distribution: FreeSurfaceLoad.Distribution = ..., selection: List[Plane] = ...) -> FreeSurfaceLoad: ...
    def create_free_line_load(self, name: str, load_case: LoadCase, point_1: Tuple[float, float], point_2: Tuple[float, float], direction: FreeLineLoad.Direction, magnitude_1: float, magnitude_2: float) -> FreeLineLoad: ...
    def create_free_point_load(self, name: str, load_case: LoadCase, direction: FreePointLoad.Direction, magnitude: float, position: Tuple[float, float]) -> FreePointLoad: ...
    def generate_xml_input(self, as_file: bool = ...) -> Union[Tuple[BytesIO, BytesIO], Tuple[File, File]]: ...

class OutputFileParser:
    @classmethod
    def get_result(cls, file: BinaryIO, table_name: str, *, parent: str = ...) -> Dict[str, dict]: ...
