from ..core import Color as Color, File as File
from ..errors import InternalError as InternalError, ModelError as ModelError, ParsingError as ParsingError
from .external_program import ExternalProgram as ExternalProgram
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from enum import Enum
from io import BytesIO, StringIO
from typing import Any, Dict, List, Optional, Tuple, Union

class DSettlementAnalysis(ExternalProgram):
    input_file: Incomplete
    def __init__(self, input_file: Union[BytesIO, File]) -> None: ...
    def get_output_file(self, extension: str = ..., *, as_file: bool = ...) -> Optional[Union[BytesIO, File]]: ...
    def get_sld_file(self, *, as_file: bool = ...) -> Union[StringIO, File]: ...

class CalculationModel(Enum):
    NEN_KOPPEJAN: CalculationModel
    NEN_BJERRUM: CalculationModel
    ISOTACHE: CalculationModel

class ConsolidationModel(Enum):
    DARCY: ConsolidationModel
    TERZAGHI: ConsolidationModel

class DrainType(Enum):
    STRIP: DrainType
    COLUMN: DrainType
    SAND_WALL: DrainType

class DrainGrid(Enum):
    TRIANGULAR: DrainGrid
    RECTANGULAR: DrainGrid
    UNDETERMINED: DrainGrid

class DrainageSimpleMode:
    begin_time: Incomplete
    end_time: Incomplete
    underpressure: Incomplete
    dewatering_head_or_pressure: Incomplete
    def __init__(self, begin_time: float, end_time: float, underpressure: float, dewatering_head_or_pressure: float) -> None: ...

class Metadata:
    def __init__(self, file_name: str = ..., company: str = ..., created_by: str = ..., title_1: str = ..., title_2: str = ..., title_3: str = ..., write_date: bool = ..., write_time: bool = ...) -> None: ...

class _Material:
    gam_dry: Incomplete
    gam_wet: Incomplete
    def __init__(self, gam_dry: float, gam_wet: float, color: Color = ..., **kwargs: Any) -> None: ...
    @property
    def color(self) -> Color: ...

class _Point:
    def __init__(self, x: float, y: float) -> None: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class _Curve:
    def __init__(self, p1: _Point, p2: _Point) -> None: ...
    @property
    def p1(self) -> _Point: ...
    @property
    def p2(self) -> _Point: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...

class _CurveList:
    def __init__(self, curves: List[_Curve]) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def curves(self) -> List[_Curve]: ...
    @property
    def points(self) -> List[_Point]: ...
    def area_above_horizontal(self, y: float = ...) -> float: ...

class _PlLine(_CurveList): ...
class _Boundary(_CurveList): ...

class _Layer:
    def __init__(self, boundary_top: _Boundary, boundary_bottom: _Boundary, material: str, pl_line_top: Union[_PlLine, int], pl_line_bottom: Union[_PlLine, int]) -> None: ...
    @property
    def material(self) -> str: ...
    @property
    def boundary_top(self) -> _Boundary: ...
    @property
    def boundary_bottom(self) -> _Boundary: ...
    @property
    def pl_line_top(self) -> Union[_PlLine, int]: ...
    @property
    def pl_line_bottom(self) -> Union[_PlLine, int]: ...

class _Vertical:
    def __init__(self, x: float) -> None: ...
    @property
    def x(self) -> float: ...

class VerticalDrain:
    range_from: Incomplete
    range_to: Incomplete
    bottom_position: Incomplete
    center_to_center: Incomplete
    width_diameter: Incomplete
    def __init__(self, drain_type: DrainType, range_from: float, range_to: float, bottom_position: float, center_to_center: float, width_diameter: float, thickness: float = ..., position_drain: float = ..., grid: DrainGrid = ..., start_of_drainage: float = ..., phreatic_level_in_drain: float = ..., schedule: Union[DrainageSimpleMode, List[Tuple[float, float, float]]] = ...) -> None: ...
    @property
    def position_drain(self) -> Optional[float]: ...

class _Geometry1D:
    phreatic_level: Incomplete
    def __init__(self, bottom_level: float, layers: List[Tuple[float, str]], phreatic_level: float = ...) -> None: ...
    @property
    def bottom_level(self) -> float: ...
    @property
    def top_level(self) -> float: ...
    @property
    def layers(self) -> List[Tuple[float, str]]: ...

class _Load(metaclass=ABCMeta): ...

class _NonUniformLoad(_Load):
    def __init__(self, name: str, points: List[Tuple[float, float]], time: int = ..., end_time: int = ..., gamma_dry: float = ..., gamma_wet: float = ..., temporary: bool = ...) -> None: ...
    @property
    def points(self) -> List[Tuple[float, float]]: ...

class _OtherLoad(_Load, metaclass=ABCMeta): ...

class _UniformLoad(_OtherLoad):
    time: Incomplete
    unit_weight: Incomplete
    height: Incomplete
    y_application: Incomplete
    def __init__(self, time: int, unit_weight: float, height: float, y_application: float) -> None: ...

class _Model(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self, calculation_model: CalculationModel, consolidation_model: ConsolidationModel, create_default_materials: bool = ..., *, natural_strain: bool = ..., reliability_analysis: bool = ..., fit_for_settlement_plate: bool = ..., horizontal_displacements: bool = ..., limits: Tuple[float, float] = ..., water_unit_weight: float = ..., verticals_discretization: int = ..., verticals_z_coordinate: float = ..., maintain_profile: bool = ..., profile_time: int = ..., profile_unit_weight_above_phreatic_level: float = ..., profile_unit_weight_below_phreatic_level: float = ..., end_of_settlement_calculation: int = ..., stress_distribution_loads: bool = ..., vertical_drain: VerticalDrain = ...): ...
    @property
    def materials(self) -> Dict[str, _Material]: ...
    @property
    def verticals(self) -> List[_Vertical]: ...
    def create_material(self, name: str, gam_dry: float, gam_wet: float, color: Color = ..., *, initial_void_ratio: float = ..., cohesion: float = ..., phi: float = ..., precon_isotache_type: int = ..., precon_koppejan_type: int = ..., use_equivalent_age: int = ..., equivalent_age: float = ..., pc: float = ..., ocr: float = ..., pop: float = ..., limit_stress: float = ..., drained: int = ..., ap_as_approximation_by_cp_cs: int = ..., cv: float = ..., permeability_ver: float = ..., permeability_hor_factor: float = ..., storage_type: int = ..., permeability_strain_modulus: float = ..., use_prob_defaults: int = ..., std_gam_dry: float = ..., std_gam_wet: float = ..., std_cv: float = ..., std_pc: float = ..., std_pri_comp_index: float = ..., std_sec_comp_index: float = ..., std_sec_comp_rate: float = ..., std_ocr: float = ..., std_permeability_ver: float = ..., std_pop: float = ..., std_permeability_hor_factor: float = ..., std_initial_void_ratio: float = ..., std_permeability_strain_modulus: float = ..., std_limit_stress: float = ..., std_cp: float = ..., std_cp1: float = ..., std_cs: float = ..., std_cs1: float = ..., std_ap: float = ..., std_asec: float = ..., std_car: float = ..., std_ca: float = ..., std_r_ratio: float = ..., std_c_ratio: float = ..., std_s_ratio: float = ..., std_cr_index: float = ..., std_cc_index: float = ..., std_csw_index: float = ..., dist_gam_dry: int = ..., dist_gam_wet: int = ..., dist_cv: int = ..., dist_pc: int = ..., dist_pri_comp_index: int = ..., dist_sec_comp_index: int = ..., dist_sec_comp_rate: int = ..., dist_ocr: int = ..., dist_permeability_ver: int = ..., dist_pop: int = ..., dist_permeability_hor_factor: int = ..., dist_initial_void_ratio: int = ..., dist_permeability_strain_modulus: int = ..., dist_limit_stress: int = ..., dist_cp: int = ..., dist_cp1: int = ..., dist_cs: int = ..., dist_cs1: int = ..., dist_ap: int = ..., dist_asec: int = ..., dist_car: int = ..., dist_ca: int = ..., dist_r_ratio: int = ..., dist_c_ratio: int = ..., dist_s_ratio: int = ..., dist_cr_index: int = ..., dist_cc_index: int = ..., dist_csw_index: int = ..., cor_cp_cp1: float = ..., cor_cs_cp1: float = ..., cor_cs1_cp1: float = ..., cor_ap_cp1: float = ..., cor_asec_cp1: float = ..., cor_cr_index_cc_index: float = ..., cor_r_ratio_c_ratio: float = ..., cor_ca_cc_index_or_c_ratio: float = ..., cor_pri_comp_index_sec_comp_index: float = ..., cor_sec_comp_rate_sec_comp_index: float = ..., cp: float = ..., cp1: float = ..., cs: float = ..., cs1: float = ..., ap: float = ..., asec: float = ..., car: float = ..., ca: float = ..., comp_ratio: int = ..., r_ratio: float = ..., c_ratio: float = ..., s_ratio: float = ..., cr_index: float = ..., cc_index: float = ..., csw_index: float = ..., pri_comp_index: float = ..., sec_comp_index: float = ..., sec_comp_rate: float = ..., horizontal_behaviour_type: int = ..., elasticity: float = ..., default_elasticity: int = ...) -> None: ...
    def create_uniform_load(self, name: str, time: int, unit_weight: float, height: float, y_application: float) -> None: ...
    def set_calculation_times(self, *time: int) -> None: ...
    def generate_input_file(self, metadata: Metadata = ..., *, dissipation_calculation: _Vertical = ..., as_file: bool = ...) -> Union[BytesIO, File]: ...

class Model1D(_Model):
    def __init__(self, calculation_model: CalculationModel, consolidation_model: ConsolidationModel, create_default_materials: bool = ..., *, natural_strain: bool = ..., water_unit_weight: float = ..., verticals_discretization: int = ..., verticals_z_coordinate: float = ..., maintain_profile: bool = ..., profile_unit_weight_above_phreatic_level: float = ..., profile_unit_weight_below_phreatic_level: float = ..., end_of_settlement_calculation: int = ..., vertical_drain: VerticalDrain = ...) -> None: ...
    @property
    def bottom_level(self) -> float: ...
    @property
    def top_level(self) -> float: ...
    @property
    def layers(self) -> List[Tuple[float, str]]: ...
    @property
    def phreatic_level(self) -> Optional[float]: ...
    def update_geometry(self, bottom_level: float, layers: List[Tuple[float, str]], phreatic_level: float = ...) -> None: ...

class Model2D(_Model):
    def __init__(self, calculation_model: CalculationModel, consolidation_model: ConsolidationModel, boundary_bottom: List[Tuple[float, float]], create_default_materials: bool = ..., *, natural_strain: bool = ..., limits: Tuple[float, float] = ..., water_unit_weight: float = ..., verticals_discretization: int = ..., verticals_z_coordinate: float = ..., maintain_profile: bool = ..., profile_time: int = ..., profile_unit_weight_above_phreatic_level: float = ..., profile_unit_weight_below_phreatic_level: float = ..., end_of_settlement_calculation: int = ..., stress_distribution_loads: bool = ..., vertical_drain: VerticalDrain = ...) -> None: ...
    def create_point(self, x: float, y: float) -> _Point: ...
    def create_pl_line(self, points: List[_Point], is_phreatic: bool = ...) -> _PlLine: ...
    def create_layer(self, boundary_top: List[_Point], material: str, pl_line_top: Union[_PlLine, int], pl_line_bottom: Union[_PlLine, int]) -> _Layer: ...
    def create_vertical(self, x: float) -> _Vertical: ...
    def create_non_uniform_load(self, name: str, points: List[Tuple[float, float]], time: int = ..., end_time: int = ..., gamma_dry: float = ..., gamma_wet: float = ..., temporary: bool = ...) -> _NonUniformLoad: ...

class OutputFileParser:
    def __init__(self, sld_file: StringIO) -> None: ...
    @property
    def raw_results(self) -> str: ...
    @property
    def vertical_results(self) -> Dict[int, Dict[str, Any]]: ...
    @property
    def residual_times(self) -> Dict[int, Dict[str, List[float]]]: ...
