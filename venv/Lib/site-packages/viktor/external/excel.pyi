from ..core import File as File
from ..errors import ExecutionError as ExecutionError, SpreadsheetError as SpreadsheetError
from .external_program import ExternalProgram as ExternalProgram
from .spreadsheet import DirectInputCell as DirectInputCell, DirectOutputCell as DirectOutputCell, NamedInputCell as NamedInputCell, NamedOutputCell as NamedOutputCell
from _typeshed import Incomplete
from io import BytesIO
from typing import Any, List, Optional, Union

class Macro:
    command: Incomplete
    def __init__(self, command: str) -> None: ...
    def serialize(self) -> dict: ...

class Excel(ExternalProgram):
    template: Incomplete
    def __init__(self, template: Union[BytesIO, File], named_input_cells: List[NamedInputCell] = ..., direct_input_cells: List[DirectInputCell] = ..., macros: List[Macro] = ..., named_output_cells: List[NamedOutputCell] = ..., direct_output_cells: List[DirectOutputCell] = ..., extension: str = ..., typed_results: bool = ...) -> None: ...
    def execute(self, timeout: int = ...) -> None: ...
    def result_available(self) -> bool: ...
    def get_named_cell_result(self, name: str) -> Any: ...
    def get_direct_cell_result(self, sheet_name: str, column: str, row: int) -> Any: ...
    def get_filled_template(self) -> File: ...
    @property
    def filled_template(self) -> BytesIO: ...
    @property
    def success(self) -> Optional[bool]: ...
    @property
    def error_message(self) -> Optional[str]: ...
