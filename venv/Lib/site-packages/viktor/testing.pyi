import datetime
from .api_v1 import Entity as Entity, EntityList as EntityList, EntityRevision as EntityRevision, EntityType as EntityType, FileResource as FileResource, User as User
from .core import File as File, ViktorController as ViktorController
from .errors import EntityCreateError as EntityCreateError, EntityDeleteError as EntityDeleteError, EntityNotFoundError as EntityNotFoundError, EntityReviseError as EntityReviseError
from .parametrization import Parametrization as Parametrization
from _typeshed import Incomplete
from io import BytesIO, StringIO
from munch import Munch
from typing import Any, Callable, Dict, Iterator, List, Sequence, Tuple, Type, Union

def mock_ParamsFromFile(controller: Type[ViktorController]) -> Callable: ...
def mock_Storage(*, get: Sequence[File] = ..., list: Sequence[Dict[str, File]] = ...) -> Callable: ...

class MockedEntityType(EntityType):
    def __init__(self, name: str = ..., entity_type_id: int = ...) -> None: ...

class MockedEntityRevision(EntityRevision):
    def __init__(self, params: Union[dict, Munch] = ..., created_date: datetime.datetime = ...) -> None: ...

class MockedUser(User):
    def __init__(self, *, first_name: str = ..., last_name: str = ..., email: str = ..., job_title: str = ...) -> None: ...

class MockedFileResource:
    @property
    def __class__(self) -> Type: ...
    file: Incomplete
    filename: Incomplete
    def __init__(self, file: File = ..., filename: str = ...) -> None: ...

class MockedEntity:
    @property
    def __class__(self) -> Type: ...
    def __init__(self, *, entity_id: int = ..., name: str = ..., entity_type: MockedEntityType = ..., last_saved_params: Union[dict, Munch] = ..., last_saved_summary: dict = ..., get_file: File = ..., parent: MockedEntity = ..., children: Sequence['MockedEntity'] = ..., siblings: Sequence['MockedEntity'] = ..., revisions: Sequence[MockedEntityRevision] = ..., invalid: bool = ...) -> None: ...
    @property
    def id(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def entity_type(self) -> MockedEntityType: ...
    @property
    def last_saved_params(self) -> Munch: ...
    @property
    def last_saved_summary(self) -> Munch: ...
    def get_file(self, *args: Any, **kwargs: Any) -> File: ...
    def parent(self, *args: Any, **kwargs: Any) -> MockedEntity: ...
    def children(self, *args: Any, entity_type_names: List[str] = ..., **kwargs: Any) -> MockedEntityList: ...
    def siblings(self, *args: Any, entity_type_names: List[str] = ..., **kwargs: Any) -> MockedEntityList: ...
    def create_child(self, entity_type_name: str, name: str, *args: Any, params: Union[dict, Munch] = ..., **kwargs: Any) -> MockedEntity: ...
    def delete(self, *args: Any, **kwargs: Any) -> None: ...
    def rename(self, name: str, *args: Any, **kwargs: Any) -> MockedEntity: ...
    def revisions(self, *args: Any, **kwargs: Any) -> List[MockedEntityRevision]: ...
    def set_params(self, params: Union[dict, Munch], *args: Any, **kwargs: Any) -> MockedEntity: ...

class MockedEntityList:
    @property
    def __class__(self) -> Type: ...
    def __init__(self, entities: Sequence[MockedEntity], *, error: Type[Exception] = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> MockedEntity: ...
    def __iter__(self) -> Iterator[MockedEntity]: ...

def mock_API(*, get_entity: Union[Sequence[MockedEntity], MockedEntity] = ..., create_child_entity: Union[Sequence[MockedEntity], MockedEntity] = ..., generate_upload_url: Union[Sequence[dict], dict] = ..., get_current_user: Union[Sequence[MockedUser], MockedUser] = ..., get_entities_by_type: Union[Sequence[Sequence[MockedEntity]], Sequence[MockedEntity]] = ..., get_entity_children: Union[Sequence[Sequence[MockedEntity]], Sequence[MockedEntity]] = ..., get_entity_siblings: Union[Sequence[Sequence[MockedEntity]], Sequence[MockedEntity]] = ..., get_root_entities: Union[Sequence[Sequence[MockedEntity]], Sequence[MockedEntity]] = ..., get_entity_parent: Union[Sequence[MockedEntity], MockedEntity] = ..., get_entity_revisions: Union[Sequence[Sequence[MockedEntityRevision]], Sequence[MockedEntityRevision]] = ..., get_entity_file: Union[Sequence[File], File] = ..., rename_entity: Union[Sequence[MockedEntity], MockedEntity] = ..., set_entity_params: Union[Sequence[MockedEntity], MockedEntity] = ...) -> Callable: ...
def mock_params(params: Union[dict, File], parametrization: Union[Parametrization, Type[Parametrization]], file_resources: Dict[int, MockedFileResource] = ..., entities: Dict[int, MockedEntity] = ...) -> Munch: ...
def mock_View(controller: Type[ViktorController]) -> Callable: ...
def mock_SciaAnalysis(get_engineering_report: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ..., get_updated_esa_model: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ..., get_xml_output_file: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ...) -> Callable: ...
def mock_DSettlementAnalysis(get_output_file: Dict[str, Union[Sequence[Union[BytesIO, File]], BytesIO, File]] = ..., get_sld_file: Union[Sequence[Union[StringIO, File]], StringIO, File] = ...) -> Callable: ...
def mock_DSheetPilingAnalysis(get_output_file: Dict[str, Union[Sequence[Union[BytesIO, File]], BytesIO, File]] = ...) -> Callable: ...
def mock_DStabilityAnalysis(get_output_file: Dict[str, Union[Sequence[File], File]] = ...) -> Callable: ...
def mock_DGeoStabilityAnalysis(get_output_file: Dict[str, Union[Sequence[Union[BytesIO, File]], BytesIO, File]] = ...) -> Callable: ...
def mock_DFoundationsAnalysis(get_output_file: Dict[str, Union[Sequence[Union[BytesIO, File]], BytesIO, File]] = ...) -> Callable: ...
def mock_GRLWeapAnalysis(get_output_file: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ...) -> Callable: ...
def mock_IdeaRcsAnalysis(get_output_file: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ..., get_idea_rcs_file: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ...) -> Callable: ...
def mock_RobotAnalysis(get_model_file: Union[Sequence[File], File] = ..., get_results: Union[Sequence[dict], dict] = ...) -> Callable: ...
def mock_AxisVMAnalysis(get_model_file: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ..., get_result_file: Union[Sequence[Union[BytesIO, File]], BytesIO, File] = ..., get_results: Union[Sequence[dict], dict] = ...) -> Callable: ...
def mock_GenericAnalysis(get_output_file: Dict[str, Union[Sequence[Union[BytesIO, File]], BytesIO, File]] = ...) -> Callable: ...
CellValue = Union[str, int, float, bool]

def mock_Excel(get_named_cell_result: Dict[str, Union[Sequence[CellValue], CellValue]] = ..., get_direct_cell_result: Dict[Tuple[str, str, int], Union[Sequence[CellValue], CellValue]] = ..., get_filled_template: Union[Sequence[File], File] = ...) -> Callable: ...
def mock_RFEMAnalysis(get_model: Union[Sequence[Union[File, BytesIO]], File, BytesIO] = ..., get_result: Dict[int, Union[Sequence[Union[File, BytesIO]], File, BytesIO]] = ...) -> Callable: ...
